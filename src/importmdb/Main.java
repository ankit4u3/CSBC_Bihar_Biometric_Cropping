/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package importmdb;

import com.healthmarketscience.jackcess.ColumnBuilder;
import com.healthmarketscience.jackcess.Database;
import com.healthmarketscience.jackcess.DatabaseBuilder;
import com.healthmarketscience.jackcess.Table;
import com.healthmarketscience.jackcess.TableBuilder;
import com.healthmarketscience.jackcess.util.ImportUtil;
import java.awt.image.BufferedImage;
import java.awt.image.WritableRaster;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.sql.Types;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Dictionary;
import java.util.Hashtable;
import java.util.Iterator;
import java.util.LinkedList;
import java.util.Queue;
import java.util.Set;
import java.util.Vector;
import java.util.concurrent.BlockingQueue;
import java.util.concurrent.ConcurrentLinkedQueue;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;
import javax.swing.DefaultListModel;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.SwingWorker;

/**
 *
 * @author developeracer
 */
public class Main extends javax.swing.JFrame implements QueryState {

    final BlockingQueue<DelayObject> StartQueue = new java.util.concurrent.DelayQueue<>();
    ConcurrentLinkedQueue<ProcessClass> ProcedureCallsOnline = new ConcurrentLinkedQueue<ProcessClass>();
    Connection connect;
    Connection MDBconn;
    int nf = 0;
    Queue<ItemClass> qIc = new LinkedList<>();
    Queue<ItemClass> qNotFound = new LinkedList<>();
    String workingDir;
    int Adjx = 0, Adjy = 0, Adjwidth = 0, Adjheight = 0;
    String Gpath;

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
        workingDir = System.getProperty("user.dir");
        System.out.println("Current working directory : " + workingDir);
        CheckMDBClass m = new CheckMDBClass(this);
        m.checkMdbExists();
        String workingDir = System.getProperty("user.dir");
        System.out.println("Current working directory : " + workingDir);
        File save_path_dir = new File(workingDir + "//signatureE//");

        if (!save_path_dir.exists()) {
            if (save_path_dir.mkdir()) {
                System.out.println("Directory is created!");
            } else {
                System.out.println("Failed to create directory!");
            }
        }
        save_path_dir = new File(workingDir + "//signatureH//");
        if (!save_path_dir.exists()) {
            if (save_path_dir.mkdir()) {
                System.out.println("Directory is created!");
            } else {
                System.out.println("Failed to create directory!");
            }
        }

    }

    public void ConsoleMsg(String msg) {

        console.append("\n" + msg);
        console.setCaretPosition(console.getDocument().getLength());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        readMMMDB = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        jButton7 = new javax.swing.JButton();
        jScrollPane7 = new javax.swing.JScrollPane();
        jListTables = new javax.swing.JList<>();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jListrollno = new javax.swing.JList<>();
        jPanel6 = new javax.swing.JPanel();
        jScrollPane4 = new javax.swing.JScrollPane();
        jListpath = new javax.swing.JList<>();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane5 = new javax.swing.JScrollPane();
        jListindex = new javax.swing.JList<>();
        jPanel8 = new javax.swing.JPanel();
        jScrollPane6 = new javax.swing.JScrollPane();
        jListError = new javax.swing.JList<>();
        jLabel13 = new javax.swing.JLabel();
        jPanel11 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jButton8 = new javax.swing.JButton();
        jLabel12 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jButton11 = new javax.swing.JButton();
        jButton18 = new javax.swing.JButton();
        jTextField4 = new javax.swing.JTextField();
        jTextField3 = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        console.setColumns(20);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        jLabel10.setText("Image Extractor Mysql | Mdb Reader Program");

        jLabel5.setText("Locate MDB File :");

        readMMMDB.setText("Open");
        readMMMDB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                readMMMDBActionPerformed(evt);
            }
        });

        jLabel11.setText("On Clicking Open MDB HardCoded will be used");

        jButton7.setText("Export");
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jListTables.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane7.setViewportView(jListTables);

        jLabel1.setText("Tables Found in mdb File#");

        jButton1.setText("Load Table");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(readMMMDB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton7))
                    .addComponent(jLabel11)
                    .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jButton1))
                .addContainerGap(1067, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(readMMMDB)
                    .addComponent(jButton7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel11)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane7, javax.swing.GroupLayout.PREFERRED_SIZE, 162, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton1)
                .addContainerGap(83, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Selection", jPanel3);

        jListrollno.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane3.setViewportView(jListrollno);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1104, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("RollNumber", jPanel5);

        jListpath.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane4.setViewportView(jListpath);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1102, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane4, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Path", jPanel6);

        jListindex.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane5.setViewportView(jListindex);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(1102, Short.MAX_VALUE))
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel7Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane5, javax.swing.GroupLayout.DEFAULT_SIZE, 332, Short.MAX_VALUE)
                .addContainerGap())
        );

        jTabbedPane1.addTab("Index Column", jPanel7);

        jListError.setModel(new javax.swing.AbstractListModel<String>() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public String getElementAt(int i) { return strings[i]; }
        });
        jScrollPane6.setViewportView(jListError);

        jLabel13.setText("Update Field where Error Will Be Written");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13)
                .addContainerGap(973, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jScrollPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 263, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(80, Short.MAX_VALUE))
        );

        jTabbedPane1.addTab("Update Field", jPanel8);

        jButton5.setText("Validate Selection");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setText("Transfer Data");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jLabel8.setText("Progress ");

        jLabel9.setText("Progress Update");

        jButton8.setText("Begin Cropping");
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        jLabel12.setText("jLabel12");

        jPanel1.setBackground(new java.awt.Color(204, 204, 204));

        jButton11.setText("GET");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });

        jButton18.setText("SET");
        jButton18.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton18ActionPerformed(evt);
            }
        });

        jTextField4.setText("jTextField4");

        jTextField3.setText("jTextField3");

        jLabel14.setText("width");

        jLabel15.setText("height");

        jLabel7.setText("y");

        jLabel6.setText("x");

        jTextField1.setText("jTextField1");

        jTextField2.setText("jTextField2");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jButton11, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButton18))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel7)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel14))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel15))))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel6)
                    .addComponent(jTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7)
                    .addComponent(jTextField4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton11)
                    .addComponent(jButton18))
                .addContainerGap(68, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 184, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton8))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(403, 403, 403)
                        .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel8)
                            .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(434, 434, 434)
                        .addComponent(jLabel9))
                    .addGroup(jPanel11Layout.createSequentialGroup()
                        .addGap(453, 453, 453)
                        .addComponent(jLabel12)))
                .addContainerGap(683, Short.MAX_VALUE))
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel11Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jButton5)
                        .addComponent(jButton6)
                        .addComponent(jButton8))
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 27, Short.MAX_VALUE)
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addGap(83, 83, 83))
        );

        jTabbedPane1.addTab("Validate Date", jPanel11);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane1)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(176, 176, 176)
                        .addComponent(jLabel10)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed

        new Thread(new Runnable() {
            @Override
            public void run() {
                int i = 1;
                int rowCounter = 0;
                final int batchSize = 50;
                int count = 0;
                String queryCount = "select count(*) from  " + jListTables.getSelectedValue();

                String query = "select " + jListrollno.getSelectedValue() + ", " + ""
                        + "" + jListpath.getSelectedValue() + ","
                        + "" + jListindex.getSelectedValue()
                        + " from " + jListTables.getSelectedValue() + " order by  " + jListrollno.getSelectedValue() + "  asc ";

                Statement stmt = null;

                try {

                    System.out.println("*****************************************************");
                    stmt = MDBconn.createStatement();
                    ResultSet rsltCount = stmt.executeQuery(queryCount);
                    while (rsltCount.next()) {
                        ConsoleMsg(i + "  " + String.valueOf(rsltCount.getString(1)));
                        rowCounter = Integer.valueOf(String.valueOf(rsltCount.getString(1)));
                    }

                    //get total row
                    // get no of loop required
                    // create 1st range entry
                    //create next entry
                    ResultSet rslt = stmt.executeQuery(query);
                    while (rslt.next()) {

                        //  saveData(String.valueOf(rslt.getString(1)), String.valueOf(rslt.getString(2)), String.valueOf(rslt.getString(3)), String.valueOf(rslt.getString(4)), String.valueOf(rslt.getString(5)), String.valueOf(rslt.getString(6)));
                        i++;
                        count++;
                        ItemClass ic = new ItemClass();
                        ic.setPath(String.valueOf(rslt.getString(2)));
                        ic.setRollno(String.valueOf(rslt.getString(1)));
                        ic.setIndex(String.valueOf(rslt.getString(3)));
                        qIc.add(ic);
                        ConsoleMsg(i + " / " + rowCounter + " /t:" + String.valueOf(rslt.getString(1)) + String.valueOf(rslt.getString(2)) + "\t" + String.valueOf(rslt.getString(3)));

                        logConvertScript(String.valueOf(rslt.getString(1)));
                        if (++count % batchSize == 0) {
                            logConvertScriptAddSleep(i + " / " + rowCounter);
                        }
// START /WAIT convert " + System.IO.Path.GetFileName(path) + " -fuzz 15% -alpha off -opaque red  " + System.IO.Path.GetFileName(path), FileMode.OpenOrCreate
                    }
                    Thread.sleep(1);

                    if (rowCounter == i) {
                        ConsoleMsg("Copy of Database Successful");
                    }
                    if (rowCounter < i) {
                        ConsoleMsg("Row Counter has less record than i ");
                    }
                    ConsoleMsg("Transfer Completed Check Database for Count");
                    ConsoleMsg("Start Cropping Now ");
                    // return mapper;
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {

                }

            }
        }).start();

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    public void logConvertScript(String rollnumber) {
        String LINE_SEPARATOR = "\r\n";
        try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("script.bat", true)))) {

            for (int i = 0; i < 4; i++) {
                String preText = "START /WAIT convert ";
                String postText = " -fuzz 15% -alpha off -opaque red  ";
                String newOldpath = String.valueOf(rollnumber) + "_" + i + ".bmp";
                out.println(preText + newOldpath + postText + newOldpath);
            }
            
            //out.println(LINE_SEPARATOR);

        } catch (IOException e) {
            //  continue;
            //exception handling left as an exercise for the reader
        }
    }

    public void logConvertScript(String rollnumber, int count, int batchsize) {

        try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("script.txt", true)))) {

            out.append(System.getProperty("line.separator"));
            for (int i = 0; i < 4; i++) {
                String preText = "START /WAIT convert ";
                String postText = " -fuzz 15% -alpha off -opaque red  ";
                String newOldpath = workingDir + "\\" + String.valueOf(rollnumber) + "_" + i + ".bmp";
                out.append(preText + newOldpath + postText + newOldpath);
            }
            out.append(System.getProperty("\\r\\n"));

        } catch (IOException e) {
            //  continue;
            //exception handling left as an exercise for the reader
        }
    }

    public void logConvertScriptAddSleep(String status) {

        try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("script.bat", true)))) {

            out.println("echo %time% ");
            out.println("echo "+ status);
            out.println("timeout 5");
             

        } catch (IOException e) {
            //  continue;
            //exception handling left as an exercise for the reader
        }
    }

    public void updateTable(String msg, String rollnumber) {
        String query = "update pet1 set  " + jListError.getSelectedValue() + "=? where " + jListrollno.getSelectedValue() + "=?";
        String finalquery = query;
        ConsoleMsg(finalquery);
        PreparedStatement preparedStmt;
        try {
            preparedStmt = MDBconn.prepareStatement(finalquery);
            preparedStmt.setString(1, msg);
            preparedStmt.setString(2, rollnumber);

            // execute the java preparedstatement
            preparedStmt.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed

        if (null == jListError.getSelectedValue()) {
            ConsoleMsg("Error Table Not Selected Select Now ");
            jButton6.setEnabled(false);
            jButton8.setEnabled(false);
            return;
        }
        if (null != jListError.getSelectedValue()) {
            ConsoleMsg(" Table   Selected Select Now ");
            jButton6.setEnabled(true);
            jButton8.setEnabled(true);
            ConsoleMsg(jListrollno.getSelectedValue());
            ConsoleMsg(jListpath.getSelectedValue());
            ConsoleMsg(jListindex.getSelectedValue());
            ConsoleMsg(jListError.getSelectedValue());
        }

        // TODO add your handling code here:
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed

        ExportDatabase();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton7ActionPerformed

    private void readMMMDBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_readMMMDBActionPerformed

        new Thread(new Runnable() {
            @Override
            public void run() {
                //readMDB();

                String path = getFile();
                if (path != null) {
                    Gpath = path;
                    readMDB(path);
                }

            }
        }).start();

        // TODO add your handling code here:
    }//GEN-LAST:event_readMMMDBActionPerformed

    public void enableDaemon() {

        Thread daemonThreadCrop = new Thread(new Runnable() {
            @Override
            public void run() {
                try {

                    while (true) {
                        if (qIc != null && !qIc.isEmpty()) {
                            jProgressBar1.setValue(qIc.size());
                            jLabel12.setText(qIc.size() - 1 + "%");
                            ItemClass c = qIc.remove();
                            System.err.println(" Procesing This Queue # " + c.getRollno().trim());
                            //    System.out.println("---- Split by comma ',' ------");

                            String path = c.getPath().trim();
                            String rollnumber = c.getRollno().trim();
                            String indexfield = c.getIndex().trim();
                            System.out.println(" **** Searching File  ****" + rollnumber + "  ==> " + path + "=========>>" + indexfield);

                            try {
                                File f = new File(path);

                                System.out.println(f.toURI().toString());
                                System.out.println("*" + "\t\t" + f.getAbsolutePath());
                                if (f.exists() && f.canRead()) {
                                    /* do something */

                                    // model.addRow(new Object[]{" Y ", rollnumber, "at ", " * "});
                                    //   Path Spath = Paths.get(path);
                                    //  Path Dpath = Paths.get(path);
                                    //  Object a = tokenstring;
                                    // queueProcessed.add(a);
                                    //  Files.copy(Spath, Dpath, StandardCopyOption.REPLACE_EXISTING);
                                    // 
                                    File checkSignatureExists = new File(workingDir + "//signatureE//" + rollnumber + ".bmp");
                                    if (checkSignatureExists.exists() == false) {
                                        try {
                                            ConsoleMsg("Working On Cropping : " + String.valueOf(rollnumber));
                                            selectCase(path, String.valueOf(rollnumber), indexfield);
                                        } catch (Exception ex) {
                                            //   continue;logError
                                            logError(String.valueOf(rollnumber) + "\t" + ex.toString());
                                            updateTable(ex.toString(), String.valueOf(rollnumber));

                                        }
                                    } else {

                                        ConsoleMsg("Skipped As Signature Was Cropped : " + String.valueOf(rollnumber));
                                        logError(rollnumber + "\tSkipped As Signature Was Cropped : " + String.valueOf(rollnumber));
                                        updateTable("OK", rollnumber);
                                    }

                                } else {

                                    updateTable("File NOT FOUND", rollnumber);
                                    logError(rollnumber + "\t File NOT FOUND\t" + String.valueOf(rollnumber));
                                    //  Object a = tokenstring;
                                    //  queueNotFound.add(a);

                                }
                            } catch (Exception ex) {

                            }

                        }

                        Thread.sleep(250);
                    }

                } catch (Exception e) {
                    try {
                        Thread.sleep(5000);
                        enableDaemon();
                    } catch (InterruptedException ex) {

                    }
                    System.out.println(e.getMessage());
                    // jButton9.doClick();

                } finally {
                    System.out.println("Daemon Thread exiting"); //never called
                }
            }
        },
                "Daemon-Thread");

        daemonThreadCrop.setDaemon(
                true); //making this thread daemon
        daemonThreadCrop.start();
    }

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed

        CropConsole c = new CropConsole(this);
        c.show();
        //   enableDaemon();
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton8ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed

        try {
            LoadTable(Gpath);
            // TODO add your handling code here:
        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        jTextField1.setText(String.valueOf(Adjx));
        jTextField2.setText(String.valueOf(Adjy));
        jTextField3.setText(String.valueOf(Adjwidth));
        jTextField4.setText(String.valueOf(Adjheight));
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jButton18ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton18ActionPerformed

        Adjx = Integer.valueOf(jTextField1.getText());
        Adjy = Integer.valueOf(jTextField2.getText());
        Adjwidth = Integer.valueOf(jTextField3.getText());
        Adjheight = Integer.valueOf(jTextField4.getText());
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton18ActionPerformed

    public void LoadTable(String path) throws ClassNotFoundException, SQLException {
        Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
        ConsoleMsg(" # Attempting MDB Stage Two #  ");
        MDBconn = DriverManager.getConnection("jdbc:ucanaccess://" + path);
        readMMMDB.setText("MDB IS OK");
        ConsoleMsg(" # MDB File is Compatible #  ");
        DatabaseMetaData meta = MDBconn.getMetaData();
        ResultSet res = meta.getTables(null, null, jListTables.getSelectedValue(),
                new String[]{"TABLE"});

        if (res.next()) {
            // Table exists
            ConsoleMsg("Table Log Exists");
        } else {
            // Table does not exist
            ConsoleMsg(" #  #  ");
            ConsoleMsg("Table Log Creating Now ");
            MdbClass m = new MdbClass();
            m.createTempTableLog(MDBconn);
            ConsoleMsg("Table Log Created ");
        }

        getAllFields();
        ConsoleMsg(" # Proceed to Field Selectiong #  ");
    }

    public void selectCase(final String path, final String icrocr, final String indextype) throws SQLException {
        int rowId = Integer.valueOf(indextype);

        switch (rowId) {

//            case 7:
//                cropImage(path, icrocr, "_0.bmp", 22, 328, 807, 486);
//                cropImage(path, icrocr, "_1.bmp", 851, 321, 747, 793);
//                cropImage(path, icrocr, "_2.bmp", 15, 821, 799, 500);
//                cropImage(path, icrocr, "_3.bmp", 821, 828, 777, 493);
            //                cropImage(path, icrocr, "_4.bmp", 2326, 1123, 860, 298);
            //                cropImage(path, icrocr, "_5.bmp", 3203, 1118, 866, 275);
//                break;
//            case 8:
//                cropImage(path, icrocr, "_0.bmp", 180, 1480, 690, 450);
//                cropImage(path, icrocr, "_1.bmp", 930, 1490, 630, 440);
//                cropImage(path, icrocr, "_2.bmp", 165, 1980, 760, 520);
//                cropImage(path, icrocr, "_3.bmp", 950, 1990, 635, 570);
//                break;
//            case 9:
//                cropImage(path, icrocr, "_0.bmp", 190, 2565, 680, 470);
//                cropImage(path, icrocr, "_1.bmp", 920, 2570, 655, 445);
//                cropImage(path, icrocr, "_2.bmp", 185, 3130, 660, 480);
//                cropImage(path, icrocr, "_3.bmp", 910, 3090, 675, 525);
//                break;
//            case 10:
//                cropImage(path, icrocr, "_0.bmp", 165, 3650, 700, 440);
//                cropImage(path, icrocr, "_1.bmp", 890, 3660, 655, 415);
//                cropImage(path, icrocr, "_2.bmp", 160, 4215, 700, 455);
//                cropImage(path, icrocr, "_3.bmp", 920, 4220, 630, 455);
//                break;
//            case 11:
//                cropImage(path, icrocr, "_0.bmp", 180, 4770, 685, 440);
//                cropImage(path, icrocr, "_1.bmp", 910, 4770, 655, 465);
//                cropImage(path, icrocr, "_2.bmp", 150, 5290, 730, 500);
//                cropImage(path, icrocr, "_3.bmp", 905, 5290, 690, 510);
//                break;
//            case 12:
//                cropImage(path, icrocr, "_0.bmp", 155, 5845, 725, 475);
//                cropImage(path, icrocr, "_1.bmp", 915, 5850, 685, 460);
//                cropImage(path, icrocr, "_2.bmp", 155, 6355, 750, 470);
//                cropImage(path, icrocr, "_3.bmp", 940, 6360, 685, 490);
//                break;
//            case 13:
//
//                break;
//            case 14:
//
//                break;
            case 1:
                cropImage(path, icrocr, "_0.bmp", 140, 309, 776, 539);
                cropImage(path, icrocr, "_1.bmp", 899, 309, 736, 533);
                cropImage(path, icrocr, "_2.bmp", 137, 838, 773, 594);
                cropImage(path, icrocr, "_3.bmp", 903, 845, 712, 580);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2326, 1123, 860, 298);
                cropImageHindijpeg(path, icrocr, ".bmp", 3203, 1118, 866, 275);
                break;
            case 2:
                cropImage(path, icrocr, "_0.bmp", 180, 1480, 690, 450);
                cropImage(path, icrocr, "_1.bmp", 930, 1490, 630, 440);
                cropImage(path, icrocr, "_2.bmp", 165, 1980, 760, 520);
                cropImage(path, icrocr, "_3.bmp", 950, 1990, 635, 570);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2321, 2230, 866, 286);
                cropImageHindijpeg(path, icrocr, ".bmp", 3214, 2235, 860, 275);
                break;
            case 3:
                cropImage(path, icrocr, "_0.bmp", 190, 2565, 680, 470);
                cropImage(path, icrocr, "_1.bmp", 920, 2570, 655, 445);
                cropImage(path, icrocr, "_2.bmp", 185, 3130, 660, 480);
                cropImage(path, icrocr, "_3.bmp", 910, 3090, 675, 525);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2321, 3342, 865, 275);
                cropImageHindijpeg(path, icrocr, ".bmp", 3209, 3342, 865, 287);
                break;
            case 4:
                cropImage(path, icrocr, "_0.bmp", 165, 3650, 700, 440);
                cropImage(path, icrocr, "_1.bmp", 890, 3660, 655, 415);
                cropImage(path, icrocr, "_2.bmp", 160, 4215, 700, 455);
                cropImage(path, icrocr, "_3.bmp", 920, 4220, 630, 455);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2315, 4454, 871, 281);
                cropImageHindijpeg(path, icrocr, ".bmp", 3208, 4454, 866, 286);
                break;
            case 5:
                cropImage(path, icrocr, "_0.bmp", 180, 4770, 685, 440);
                cropImage(path, icrocr, "_1.bmp", 910, 4770, 655, 465);
                cropImage(path, icrocr, "_2.bmp", 150, 5290, 730, 500);
                cropImage(path, icrocr, "_3.bmp", 905, 5290, 690, 510);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2315, 5566, 871, 292);
                cropImageHindijpeg(path, icrocr, ".bmp", 3203, 5571, 866, 287);
                break;
            case 6:
                cropImage(path, icrocr, "_0.bmp", 155, 5845, 725, 475);
                cropImage(path, icrocr, "_1.bmp", 915, 5850, 685, 460);
                cropImage(path, icrocr, "_2.bmp", 155, 6355, 750, 470);
                cropImage(path, icrocr, "_3.bmp", 940, 6360, 685, 490);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2304, 6667, 877, 286);
                cropImageHindijpeg(path, icrocr, ".bmp", 3192, 6672, 877, 270);
                break;

            default:
                System.out.println("          *****************       " + indextype);
                break;
        }
    }

    private BufferedImage trimImage(BufferedImage image) {
        WritableRaster raster = image.getAlphaRaster();
        int width = raster.getWidth();
        int height = raster.getHeight();
        int left = 0;
        int top = 0;
        int right = width - 1;
        int bottom = height - 1;
        int minRight = width - 1;
        int minBottom = height - 1;

        top:
        for (; top < bottom; top++) {
            for (int x = 0; x < width; x++) {
                if (raster.getSample(x, top, 0) != 0) {
                    minRight = x;
                    minBottom = top;
                    break top;
                }
            }
        }

        left:
        for (; left < minRight; left++) {
            for (int y = height - 1; y > top; y--) {
                if (raster.getSample(left, y, 0) != 0) {
                    minBottom = y;
                    break left;
                }
            }
        }

        bottom:
        for (; bottom > minBottom; bottom--) {
            for (int x = width - 1; x >= left; x--) {
                if (raster.getSample(x, bottom, 0) != 0) {
                    minRight = x;
                    break bottom;
                }
            }
        }

        right:
        for (; right > minRight; right--) {
            for (int y = bottom; y >= top; y--) {
                if (raster.getSample(right, y, 0) != 0) {
                    break right;
                }
            }
        }

        return image.getSubimage(left, top, right - left + 1, bottom - top + 1);
    }

    public void cropImage(final String path, final String icrocr, String counter, final int x, final int y, final int width, final int height) {

        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(path));
            BufferedImage croppedImage = image.getSubimage(x + Adjx, y + Adjy, width + Adjwidth, height + Adjheight);
            File save_path = new File(icrocr + counter);
            // shapeList.add(new Rectangle(x + Adjx, y + Adjy, width + Adjwidth, height + Adjheight));

            try {
                ImageIO.write(croppedImage, "bmp", save_path);
            } catch (IOException ex) {

//                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {

            e.printStackTrace();

        }
    }

    public void cropImagejpeg(final String path, final String icrocr, String counter, final int x, final int y, final int width, final int height) {

        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(path));
            BufferedImage croppedImage = image.getSubimage(x + Adjx, y + Adjy, width + Adjwidth, height + Adjheight);
            File save_path = new File(workingDir + "//signature//" + icrocr + counter);

            if (!save_path.exists()) {
                if (save_path.mkdir()) {
                    System.out.println("Directory is created!");
                } else {
                    System.out.println("Failed to create directory!");
                }
            }
            try {
                ImageIO.write(croppedImage, "bmp", save_path);
            } catch (IOException ex) {
//                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {
            e.printStackTrace();

        }
    }

    public void cropImageHindijpeg(final String path, final String icrocr, String counter, final int x, final int y, final int width, final int height) {

        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(path));

            BufferedImage croppedImage = image.getSubimage(x, y, width, height);
            File save_path = new File(workingDir + "//signatureH//" + icrocr + counter);

            try {
                ImageIO.write(croppedImage, "bmp", save_path);
            } catch (IOException ex) {
//                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {
            e.printStackTrace();

        }
    }

    public void cropImageEnglishjpeg(final String path, final String icrocr, String counter, final int x, final int y, final int width, final int height) {

        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(path));
            BufferedImage croppedImage = image.getSubimage(x, y, width, height);

            File save_path = new File(workingDir + "//signatureE//" + icrocr + counter);

            try {
                ImageIO.write(croppedImage, "bmp", save_path);
            } catch (IOException ex) {
//                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {
            e.printStackTrace();
            System.exit(1);
        }
    }

    public void logError(String error) {

        try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("myfile.txt", true)))) {
            out.println(" error");
            out.append(error);
        } catch (IOException e) {
            //  continue;
            //exception handling left as an exercise for the reader
        }
    }

    public void Th() {
        Thread daemonProcedureThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {

                    while (true) {
                        if (ProcedureCallsOnline.isEmpty()) {

                        } else {
                            ProcessClass str;
                            System.out.println("Reading Data From Server Started");

                            while ((str = ProcedureCallsOnline.poll()) != null) {

                                System.err.println(str.getRollno());
                                getBinary(str);

                            }
                        }
                    }
                } catch (Exception e) {

                } finally {

                    System.out.println("Daemon Thread exiting"); //never called
                    try {
                        Thread.sleep(5000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    connectMysql();
                    Th();
                }
            }
        }, "Daemon-Procedure-Thread");

        daemonProcedureThread.setDaemon(true); //making this thread daemon
        daemonProcedureThread.start();

// TODO add your handling code here:
    }

    public void ThreadMDB() {

        Thread daemonProcedureThread = new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    connectMysql();
                    while (true) {
                        if (ProcedureCallsOnline.isEmpty()) {

                        } else {
                            ProcessClass str;
                            System.out.println("Reading Data From Server Started");

                            while ((str = ProcedureCallsOnline.poll()) != null) {

                                System.err.println(str.getRollno());
                                getBinary(str);

                            }
                        }
                    }
                } catch (Exception e) {

                } finally {

                    System.out.println("Daemon Thread exiting"); //never called
                    try {
                        Thread.sleep(5000);
                    } catch (InterruptedException ex) {
                        Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    connectMysql();
                    ThreadMDB();
                }
            }
        }, "Daemon-Procedure-Thread");

        daemonProcedureThread.setDaemon(true); //making this thread daemon
        daemonProcedureThread.start();

// TODO add your handling code here:
    }

    public String getFile() {
        JFileChooser chooser;
        int result;

        chooser = new JFileChooser();
        chooser.setCurrentDirectory(new java.io.File("."));
        chooser.setDialogTitle("Select SQL FILE ");
        chooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
        //
        // disable the "All files" option.
        //
        chooser.setAcceptAllFileFilterUsed(false);
        //    
        if (chooser.showOpenDialog(Main.this) == JFileChooser.APPROVE_OPTION) {
            System.out.println("getCurrentDirectory(): "
                    + chooser.getCurrentDirectory());
            System.out.println("getSelectedFile() : "
                    + chooser.getSelectedFile());
            return chooser.getSelectedFile().toString().trim();
        } else {
            System.out.println("No Selection ");
            return null;
        }

    }

    public void readMDB(String path) {
        try {
            ConsoleMsg(" # Attempting to Read Path  #  ");
            Set<String> setA;
            try {
                setA = DatabaseBuilder.open(new File(path)).getTableNames();
                Iterator iterator = setA.iterator();
                Vector listData = new Vector();
                while (iterator.hasNext()) {
                    String element = (String) iterator.next();
                    listData.addElement(element);
                    System.err.print(element);
                }
                jListTables.setListData(listData);
            } catch (IOException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
                ConsoleMsg(" # File Error  #  ");
            } finally {

            }
            Class.forName("net.ucanaccess.jdbc.UcanaccessDriver");
            ConsoleMsg(" # Attempting MDB Stage Two #  ");
            MDBconn = DriverManager.getConnection("jdbc:ucanaccess://" + path);
            readMMMDB.setText("MDB IS OK");
            ConsoleMsg(" # MDB File is Compatible #  ");
            DatabaseMetaData meta = MDBconn.getMetaData();
            ResultSet res = meta.getTables(null, null, "pet1",
                    new String[]{"TABLE"});

            if (res.next()) {
                // Table exists
                ConsoleMsg("Table Log Exists");
            } else {
                // Table does not exist
                ConsoleMsg(" #  #  ");
                ConsoleMsg("Table Log Creating Now ");
                MdbClass m = new MdbClass();
                m.createTempTableLog(MDBconn);
                ConsoleMsg("Table Log Created ");
            }

//            String query = "select * from passtable ";
//
//            Statement stmt = null;
//            Dictionary jackets = new Hashtable();
//
//            try {
//
//                System.out.println("*****************************************************");
//                stmt = MDBconn.createStatement();
//                ResultSet rslt = stmt.executeQuery(query);
//                while (rslt.next()) {
//
//                    String id = String.valueOf(rslt.getString("rollno"));
//                    String rollno = String.valueOf(rslt.getString("DISTRICT"));
//                    ProcessClass c = new ProcessClass();
//                    c.setRollno(rslt.getString("rollno"));
//
//                    ProcedureCallsOnline.add(c);
//                    ConsoleMsg(id + "\t" + rollno);
//                }
//                Thread.sleep(2000);
//
//                // return mapper;
//            } catch (Exception e) {
//                e.printStackTrace();
//            } finally {
//
//            }
            // getAllDistrict();
            getAllFields();

        } catch (ClassNotFoundException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            readMMMDB.setText("MDB IS ");
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void getAllFields() {
        jListrollno.removeAll();

        String query = "select * from  " + jListTables.getSelectedValue();

        Statement stmt = null;
        Dictionary jackets = new Hashtable();
        DefaultListModel model = new DefaultListModel();

        try {

            System.out.println("*****************************************************");
            stmt = MDBconn.createStatement();
            ResultSet rslt = stmt.executeQuery(query);
            ResultSetMetaData rsmd = rslt.getMetaData();
            int columnCount = rsmd.getColumnCount();

// The column count starts from 1
            for (int i = 1; i <= columnCount; i++) {
                String name = rsmd.getColumnName(i);
                model.addElement(name);

                // return mapper;
            }
            jListrollno.setModel(model);
            jListpath.setModel(model);
            jListindex.setModel(model);
            jListError.setModel(model);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }

    }

    public void getRollNoByDistrict(String district) {
        String query = "select * from passtable where DISTRICT LIKE '%" + district + "%'";

        Statement stmt = null;

        try {

            System.out.println("*****************************************************");
            stmt = MDBconn.createStatement();
            ResultSet rslt = stmt.executeQuery(query);
            while (rslt.next()) {

                String rollno = String.valueOf(rslt.getString("rollno"));

                ConsoleMsg(district + "\t" + rollno);
                ProcessClass c = new ProcessClass();
                c.setRollno(rslt.getString("rollno"));
                c.setDistrictName(district);
                ProcedureCallsOnline.add(c);

            }
            Thread.sleep(2000);

            // return mapper;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }
    }

    public Thread copy() throws SQLException {

        int i = 1;
        int rowCounter = 0;

        String queryCount = "select count(*) from pet";

        String query = "select " + jListrollno.getSelectedValue() + ", " + ""
                + "" + jListpath.getSelectedValue() + ","
                + "" + jListindex.getSelectedValue() + " "
                + " from pet limit 1000 offset 0,100";

        Statement stmt = null;

        try {

            System.out.println("*****************************************************");
            stmt = MDBconn.createStatement();
            ResultSet rsltCount = stmt.executeQuery(queryCount);
            while (rsltCount.next()) {
                ConsoleMsg(i + "  " + String.valueOf(rsltCount.getString(1)));
                rowCounter = Integer.valueOf(String.valueOf(rsltCount.getString(1)));
            }

            //get total row
            // get no of loop required
            // create 1st range entry
            //create next entry 
            ResultSet rslt = stmt.executeQuery(query);
            while (rslt.next()) {

                ConsoleMsg(i + " / " + rowCounter + " /t:" + String.valueOf(rslt.getString(1)) + String.valueOf(rslt.getString(2)));
                saveData(String.valueOf(rslt.getString(1)), String.valueOf(rslt.getString(2)), String.valueOf(rslt.getString(3)), String.valueOf(rslt.getString(4)), String.valueOf(rslt.getString(5)), String.valueOf(rslt.getString(6)));
                i++;
            }
            try {
                Thread.sleep(2000);
            } catch (InterruptedException ex) {
                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }

            if (rowCounter == i) {
                ConsoleMsg("Copy of Database Successful");
            }
            if (rowCounter < i) {
                ConsoleMsg("Row Counter has less record than i ");
            }
            ConsoleMsg("Transfer Completed Check Database for Count");
            // return mapper;
        } catch (Exception ex) {

        }

        return null;
    }

    public void ExportDatabase() {
        new SwingWorker<Object, Object>() {

            @Override
            protected void done() {
                JOptionPane.showMessageDialog(null, "MDB CREATED");
                ConsoleMsg("File Created Successfully");
            }

            @Override
            protected Object doInBackground() throws Exception {

                Database db;
                try {

                    ConsoleMsg("Creating MDB File Please Wait");
                    String timeStamp = new SimpleDateFormat("yyyyMMdd_HHmmss").format(new Date());
                    db = DatabaseBuilder.create(Database.FileFormat.V2000, new File(timeStamp + ".mdb"));
                    Table newTable;
                    try {
                        newTable = new TableBuilder("NewTable")
                                .addColumn(new ColumnBuilder("a")
                                        .setSQLType(Types.INTEGER))
                                .addColumn(new ColumnBuilder("b")
                                        .setSQLType(Types.VARCHAR))
                                .toTable(db);
                        //   newTable.addRow(1, "foo");
                        try {
                            extractDatabasebyFile(timeStamp + ".mdb");
                            //getResultMaleMarks();
                            //gethprbMarks();
                            db.close();

                        } catch (ClassNotFoundException ex) {
                            JOptionPane.showMessageDialog(null, "ERROR");
                            ConsoleMsg("An Error was Detected In Creating File");
                        }

                    } catch (SQLException ex) {
                        JOptionPane.showMessageDialog(null, "ERROR");

                        ConsoleMsg("An Error was Detected In Creating File");
                    }

                } catch (IOException ex) {

                    JOptionPane.showMessageDialog(null, "ERROR");
                    ConsoleMsg("An Error was Detected In Creating File");
                }

                return null;

//  throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
            }

        }.execute();
    }

    void extractDatabasebyFile(final String filename) throws ClassNotFoundException, SQLException {

        Statement stmt = null;

        try {
            stmt = connect.createStatement();
            ResultSet rslt;

            Database db = DatabaseBuilder.open(new File(filename));

            rslt = stmt.executeQuery("SELECT\n"
                    + "  `captured`.`rollnumber`,\n"
                    + "  `csbc_dup`.`rollno`,\n"
                    + "  `csbc_dup`.`cname`,\n"
                    + "  `csbc_dup`.`dob1`,\n"
                    + "  `csbc_dup`.`fname`,\n"
                    + "  `csbc_dup`.`venuecode`,\n"
                    + "  `csbc_dup`.`Gender`,\n"
                    + "  `csbc_dup`.`centcode`,\n"
                    + "  `attendence`.`status`,\n"
                    + "  `fingerprint`.`fmd0`,\n"
                    + "  `captured`.`photo0`\n"
                    + "FROM\n"
                    + "  `csbc_dup`\n"
                    + "  LEFT JOIN `attendence` ON `csbc_dup`.`rollno` = `attendence`.`barcode`\n"
                    + "  LEFT JOIN `fingerprint` ON `fingerprint`.`rollno` = `csbc_dup`.`rollno`\n"
                    + "  LEFT JOIN `captured` ON `captured`.`rollnumber` = `csbc_dup`.`rollno`;");
            new ImportUtil.Builder(db, "total1").importResultSet(rslt);

            //   rslt = stmt.executeQuery("");
            //  new ImportUtil.Builder(db, "CandidateLinkTable").importResultSet(rslt);
            db.close();

        } catch (Exception e) {
            JOptionPane.showMessageDialog(null, "ERROR" + e.getMessage());
        }
    }

    public void saveData(String rollnumber, String cname, String fname, String gender, String dob, String centcode) {

        PreparedStatement preparedStatement = null;

        try {
            // This will load the MySQL driver, each DB has its own driver

            preparedStatement = connect
                    .prepareStatement("insert into  csbc_dup(autonum,rollno,cname,fname,Gender,dob1,venuecode) values ((SELECT md5(UUID()) from dual) ,?, ?,?,?,?,? )");

            preparedStatement.setString(1, rollnumber);
            preparedStatement.setString(2, cname);
            preparedStatement.setString(3, fname);
            preparedStatement.setString(4, gender);
            preparedStatement.setString(5, dob);
            //for replacing 10.0 to 10 in center code 
            //using regular expressions
            preparedStatement.setString(6, centcode.replaceAll("(?<=^\\d+)\\.0*$", ""));
            preparedStatement.executeUpdate();

        } catch (Exception e) {
            ConsoleMsg(e.getMessage());
        }

    }

    public void connectMysql() {
//        String ip = "127.0.0.1";//prop.getProperty("serverippath");
//        String username = "RaceAdmin";// prop.getProperty("serveruid");
//        String password = "v721PL7y";//prop.getProperty("serverpwd");
//        String db = "csbc";//prop.getProperty("serverdb");
//
//        try {
//            // This will load the MySQL driver, each DB has its own driver
//            Class.forName("com.mysql.jdbc.Driver");
//            // Setup the connection with the DB
//            connect = DriverManager
//                    .getConnection("jdbc:mysql://" + ip + "/" + db + "?"
//                            + "user=" + username + "&password=" + password);
//
//            System.out.println("Connected to database." + username);
//            JOptionPane.showMessageDialog(null, "System Connected");
//
//        } catch (Exception e) {
//            System.out.println("Failed to connect " + e.getMessage());
//            JOptionPane.showMessageDialog(null, e.getMessage());
//            JOptionPane.showMessageDialog(null, "Please Contact Network Maintainance Person to Fix the Network Stop All Work For Now ");
//
//        }

    }

    protected void getSnapsId() {
        new SwingWorker<Object, Object>() {

            @Override
            protected void done() {

            }

            @Override
            protected Object doInBackground() throws Exception {

                String query = "select id,rollno from snaps ";

                Statement stmt = null;
                Dictionary jackets = new Hashtable();

                try {

                    System.out.println("*****************************************************");
                    stmt = connect.createStatement();
                    ResultSet rslt = stmt.executeQuery(query);
                    while (rslt.next()) {

                        String id = String.valueOf(rslt.getString("id"));
                        String rollno = String.valueOf(rslt.getString("rollno"));
                        ProcessClass c = new ProcessClass();
                        c.setRollno(rslt.getString("rollno"));
                        c.setShiftid(rslt.getInt("id"));
                        ProcedureCallsOnline.add(c);
                        ConsoleMsg(id + "\t" + rollno);
                    }
                    Thread.sleep(2000);

                    // return mapper;
                } catch (Exception e) {
                    e.printStackTrace();
                } finally {

                }

                return null;
            }
        }.execute();

    }

    public void getBinary(ProcessClass pc) {
        String rollno = pc.getRollno().trim();
        String district = pc.getDistrictName().trim();
        String query = "select photo0 from snaps where rollno=" + rollno + " LIMIT 1";

        Statement stmt = null;
        Dictionary jackets = new Hashtable();

        try {

            System.out.println("*****************************************************");
            stmt = connect.createStatement();
            ResultSet rslt = stmt.executeQuery(query);
            if (rslt.next()) {

                ConsoleMsg(rollno + "\t" + "Working On");
                File mkdir = new File(district);
                if (mkdir.exists()) {

                } else {
                    mkdir.mkdir();
                }
                FileOutputStream fout = new FileOutputStream(district + "/" + rollno + ".jpg");
                fout.write((byte[]) rslt.getBytes("photo0"));
                fout.close();
                updateNotFoundSnaps(pc, "S-OK");
                checkFingerprint(pc);
                checkAttendence(pc);
            } else {

                ConsoleMsg(rollno + "\t" + "NOT FOUND ");
                appendLog(district, rollno);
                updateNotFoundSnaps(pc, "S-NOT");
                checkFingerprint(pc);
                checkAttendence(pc);
            }

            // return mapper;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }

    }

    public void checkFingerprint(ProcessClass pc) {
        String rollno = pc.getRollno().trim();
        String district = pc.getDistrictName().trim();
        String query = "select barcode from fingerprint where barcode=" + rollno + " LIMIT 1";

        Statement stmt = null;

        try {

            System.out.println("*****************************************************");
            stmt = connect.createStatement();
            ResultSet rslt = stmt.executeQuery(query);
            if (rslt.next()) {

                updateNotFoundFinger(pc, "F-OK");
            } else {

                updateNotFoundFinger(pc, "F-NOT");
            }

            // return mapper;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }
    }

    public void checkAttendence(ProcessClass pc) {
        String rollno = pc.getRollno().trim();
        String district = pc.getDistrictName().trim();
        String query = "select barcode from jacketlink_info where barcode=" + rollno + " LIMIT 1";

        Statement stmt = null;

        try {

            System.out.println("*****************************************************");
            stmt = connect.createStatement();
            ResultSet rslt = stmt.executeQuery(query);
            if (rslt.next()) {

                updateNotFoundAttendence(pc, "JLINK-OK");
            } else {

                updateNotFoundAttendence(pc, "JLINK-NOT");
            }

            // return mapper;
        } catch (Exception e) {
            e.printStackTrace();
        } finally {

        }
    }

    public void updateNotFoundFinger(ProcessClass pc, String status) {
        String rollno = pc.getRollno().trim();
        String district = pc.getDistrictName().trim();
        try {
            // create our java preparedstatement using a sql update query

            PreparedStatement ps = MDBconn.prepareStatement(
                    "UPDATE passtable SET finger = ? where Rollno=?");

            // set the preparedstatement parameters
            ps.setString(1, status);
            ps.setString(2, rollno);
            // call executeUpdate to execute our sql update statement
            ps.executeUpdate();
            ps.close();
        } catch (SQLException se) {
            ConsoleMsg("Error Updating Shift ID" + se.getMessage());

        }
    }

    public void updateNotFoundSnaps(ProcessClass pc, String status) {
        String rollno = pc.getRollno().trim();
        String district = pc.getDistrictName().trim();
        try {
            // create our java preparedstatement using a sql update query

            PreparedStatement ps = MDBconn.prepareStatement(
                    "UPDATE passtable SET photo = ? where Rollno=?");

            // set the preparedstatement parameters
            ps.setString(1, status);
            ps.setString(2, rollno);
            // call executeUpdate to execute our sql update statement
            ps.executeUpdate();
            ps.close();
        } catch (SQLException se) {
            ConsoleMsg("Error Updating Shift ID" + se.getMessage());

        }
    }

    public void updateNotFoundAttendence(ProcessClass pc, String status) {
        String rollno = pc.getRollno().trim();
        String district = pc.getDistrictName().trim();
        try {
            // create our java preparedstatement using a sql update query

            PreparedStatement ps = MDBconn.prepareStatement(
                    "UPDATE passtable SET attendence = ? where Rollno=?");

            // set the preparedstatement parameters
            ps.setString(1, status);
            ps.setString(2, rollno);
            // call executeUpdate to execute our sql update statement
            ps.executeUpdate();
            ps.close();
        } catch (SQLException se) {
            ConsoleMsg("Error Updating Shift ID" + se.getMessage());

        }
    }

    public void appendLog(String District, String msg) {
        try {
            PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(District + "_NOTFOUND.txt", true)));
            out.println(msg);
            out.close();
        } catch (IOException e) {
            //exception handling left as an exercise for the reader
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea console;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton18;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    public javax.swing.JList<String> jListError;
    private javax.swing.JList<String> jListTables;
    private javax.swing.JList<String> jListindex;
    private javax.swing.JList<String> jListpath;
    public javax.swing.JList<String> jListrollno;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JScrollPane jScrollPane5;
    private javax.swing.JScrollPane jScrollPane6;
    private javax.swing.JScrollPane jScrollPane7;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField3;
    private javax.swing.JTextField jTextField4;
    private javax.swing.JButton readMMMDB;
    // End of variables declaration//GEN-END:variables

    @Override
    public void queryOK() {
    }

    @Override
    public void queryFailed() {
        System.err.println("pppppppppppffffffffffffffff");
    }
}
