/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package importmdb;

import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.imageio.ImageIO;

/**
 *
 * @author neonex
 */
public class CropConsole extends javax.swing.JFrame {

    Main m;
    String workingDir;

    /**
     * Creates new form CropConsole
     */
    public CropConsole(Main mRef) {
        this.m = mRef;
        initComponents();
        workingDir = System.getProperty("user.dir");
        System.out.println("Current working directory : " + workingDir);
          enableDaemon();  
    }

    public void ConsoleMsg(String msg) {

        console.append("\n" + msg);
        console.setCaretPosition(console.getDocument().getLength());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        console = new javax.swing.JTextArea();
        jProgressBar1 = new javax.swing.JProgressBar();
        jLabel1 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jButton1.setText("Click 2 Start");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        console.setColumns(20);
        console.setRows(5);
        jScrollPane1.setViewportView(console);

        jLabel1.setText("%");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(103, 103, 103)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel1))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(28, 28, 28)
                                .addComponent(jButton1)))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(32, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 196, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        enableDaemon();        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    public void updateTable(String msg, String rollnumber) {
        String query = "update pet1 set  " + m.jListError.getSelectedValue() + "=? where " + m.jListrollno.getSelectedValue() + "=?";
        String finalquery = query;
        ConsoleMsg(finalquery);
        PreparedStatement preparedStmt;
        try {
            preparedStmt = m.MDBconn.prepareStatement(finalquery);
            preparedStmt.setString(1, msg);
            preparedStmt.setString(2, rollnumber);

            // execute the java preparedstatement
            preparedStmt.executeUpdate();
        } catch (SQLException ex) {
            Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
        }

    }

    public void enableDaemon() {

        Thread daemonThreadCrop = new Thread(new Runnable() {
            @Override
            public void run() {
                try {

                    while (true) {
                        if (m.qIc != null && !m.qIc.isEmpty()) {
                            jProgressBar1.setValue(m.qIc.size());
                            jLabel1.setText(m.qIc.size() - 1 + "%");
                            ItemClass c = m.qIc.remove();
                            System.err.println(" Procesing This Queue # " + c.getRollno().trim());
                            //    System.out.println("---- Split by comma ',' ------");

                            String path = c.getPath().trim();
                            String rollnumber = c.getRollno().trim();
                            String indexfield = c.getIndex().trim();
                            System.out.println(" **** Searching File  ****" + rollnumber + "  ==> " + path + "=========>>" + indexfield);

                            try {
                                File f = new File(path);

                                System.out.println(f.toURI().toString());
                                System.out.println("*" + "\t\t" + f.getAbsolutePath());
                                if (f.exists() && f.canRead()) {
                                    /* do something */

                                    // model.addRow(new Object[]{" Y ", rollnumber, "at ", " * "});
                                    //   Path Spath = Paths.get(path);
                                    //  Path Dpath = Paths.get(path);
                                    //  Object a = tokenstring;
                                    // queueProcessed.add(a);
                                    //  Files.copy(Spath, Dpath, StandardCopyOption.REPLACE_EXISTING);
                                    // 
                                    File checkSignatureExists = new File(workingDir + "//signatureE//" + rollnumber + ".bmp");
                                    if (checkSignatureExists.exists() == false) {
                                        try {
                                            ConsoleMsg("Working On Cropping : " + String.valueOf(rollnumber));
                                            selectCase(path, String.valueOf(rollnumber), indexfield);
                                        } catch (Exception ex) {
                                            //   continue;logError
                                            logError(String.valueOf(rollnumber) + "\t" + ex.toString());
                                            updateTable(ex.toString(), String.valueOf(rollnumber));

                                        }
                                    } else {

                                        ConsoleMsg("Skipped As Signature Was Cropped : " + String.valueOf(rollnumber));
                                         logError(rollnumber + "\tSkipped As Signature Was Cropped : " + String.valueOf(rollnumber));
                                        updateTable("OK", rollnumber);
                                    }

                                } else {

                                    updateTable("File NOT FOUND", rollnumber);
                                    logError(rollnumber + "\t File NOT FOUND\t" + String.valueOf(rollnumber));
                                    //  Object a = tokenstring;
                                    //  queueNotFound.add(a);

                                }
                            } catch (Exception ex) {

                            }

                        }

                        Thread.sleep(250);
                    }

                } catch (Exception e) {
                    try {
                        Thread.sleep(5000);
                        enableDaemon();
                    } catch (InterruptedException ex) {

                    }
                    System.out.println(e.getMessage());
                    // jButton9.doClick();

                } finally {
                    System.out.println("Daemon Thread exiting"); //never called
                }
            }
        },
                "Daemon-Thread");

        daemonThreadCrop.setDaemon(
                true); //making this thread daemon
        daemonThreadCrop.start();
    }
    public void logError(String error) {

        try (PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter("myfile.txt", true)))) {
            out.println(" error");
            out.append(error);
        } catch (IOException e) {
            //  continue;
            //exception handling left as an exercise for the reader
        }
    }
    public void selectCase(final String path, final String icrocr, final String indextype) throws SQLException {
        int rowId = Integer.valueOf(indextype);

        switch (rowId) {

            case 1:
                cropImage(path, icrocr, "_0.bmp", 140, 309, 776, 539);
                cropImage(path, icrocr, "_1.bmp", 899, 309, 736, 533);
                cropImage(path, icrocr, "_2.bmp", 137, 838, 773, 594);
                cropImage(path, icrocr, "_3.bmp", 903, 845, 712, 580);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2326, 1123, 860, 298);
                cropImageHindijpeg(path, icrocr, ".bmp", 3203, 1118, 866, 275);
                break;
            case 2:
                cropImage(path, icrocr, "_0.bmp", 180, 1480, 690, 450);
                cropImage(path, icrocr, "_1.bmp", 930, 1490, 630, 440);
                cropImage(path, icrocr, "_2.bmp", 165, 1980, 760, 520);
                cropImage(path, icrocr, "_3.bmp", 950, 1990, 635, 570);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2321, 2230, 866, 286);
                cropImageHindijpeg(path, icrocr, ".bmp", 3214, 2235, 860, 275);
                break;
            case 3:
                cropImage(path, icrocr, "_0.bmp", 190, 2565, 680, 470);
                cropImage(path, icrocr, "_1.bmp", 920, 2570, 655, 445);
                cropImage(path, icrocr, "_2.bmp", 185, 3130, 660, 480);
                cropImage(path, icrocr, "_3.bmp", 910, 3090, 675, 525);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2321, 3342, 865, 275);
                cropImageHindijpeg(path, icrocr, ".bmp", 3209, 3342, 865, 287);
                break;
            case 4:
                cropImage(path, icrocr, "_0.bmp", 165, 3650, 700, 440);
                cropImage(path, icrocr, "_1.bmp", 890, 3660, 655, 415);
                cropImage(path, icrocr, "_2.bmp", 160, 4215, 700, 455);
                cropImage(path, icrocr, "_3.bmp", 920, 4220, 630, 455);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2315, 4454, 871, 281);
                cropImageHindijpeg(path, icrocr, ".bmp", 3208, 4454, 866, 286);
                break;
            case 5:
                cropImage(path, icrocr, "_0.bmp", 180, 4770, 685, 440);
                cropImage(path, icrocr, "_1.bmp", 910, 4770, 655, 465);
                cropImage(path, icrocr, "_2.bmp", 150, 5290, 730, 500);
                cropImage(path, icrocr, "_3.bmp", 905, 5290, 690, 510);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2315, 5566, 871, 292);
                cropImageHindijpeg(path, icrocr, ".bmp", 3203, 5571, 866, 287);
                break;
            case 6:
                cropImage(path, icrocr, "_0.bmp", 155, 5845, 725, 475);
                cropImage(path, icrocr, "_1.bmp", 915, 5850, 685, 460);
                cropImage(path, icrocr, "_2.bmp", 155, 6355, 750, 470);
                cropImage(path, icrocr, "_3.bmp", 940, 6360, 685, 490);
                cropImageEnglishjpeg(path, icrocr, ".bmp", 2304, 6667, 877, 286);
                cropImageHindijpeg(path, icrocr, ".bmp", 3192, 6672, 877, 270);
                break;

            default:
                System.out.println("          *****************       " + indextype);
                break;
        }
    }

    public void cropImage(final String path, final String icrocr, String counter, final int x, final int y, final int width, final int height) {

        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(path));
            BufferedImage croppedImage = image.getSubimage(x + m.Adjx, y + m.Adjy, width + m.Adjwidth, height + m.Adjheight);
            File save_path = new File(icrocr + counter);
            // shapeList.add(new Rectangle(x + Adjx, y + Adjy, width + Adjwidth, height + Adjheight));

            try {
                ImageIO.write(croppedImage, "bmp", save_path);
            } catch (IOException ex) {

//                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {

            e.printStackTrace();

        }
    }

    public void cropImageHindijpeg(final String path, final String icrocr, String counter, final int x, final int y, final int width, final int height) {

        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(path));

            BufferedImage croppedImage = image.getSubimage(x, y, width, height);
            File save_path = new File(workingDir + "//signatureH//" + icrocr + counter);

            try {
                ImageIO.write(croppedImage, "bmp", save_path);
            } catch (IOException ex) {
//                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {
            e.printStackTrace();

        }
    }

    public void cropImageEnglishjpeg(final String path, final String icrocr, String counter, final int x, final int y, final int width, final int height) {

        BufferedImage image = null;
        try {
            image = ImageIO.read(new File(path));
            BufferedImage croppedImage = image.getSubimage(x, y, width, height);

            File save_path = new File(workingDir + "//signatureE//" + icrocr + counter);

            try {
                ImageIO.write(croppedImage, "bmp", save_path);
            } catch (IOException ex) {
//                Logger.getLogger(Main.class.getName()).log(Level.SEVERE, null, ex);
            }
        } catch (Exception e) {
            e.printStackTrace();
            
        }
    }

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea console;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    // End of variables declaration//GEN-END:variables
}
